name: Build Backend

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'crawling-server' # RDS 데이터베이스 이름
          mysql user: 'admin' # RDS 데이터베이스 사용자 이름
          mysql password: ${{ secrets.AWS_DB_PASSWORD }} # Secrets에서 가져온 비밀번호
          mysql host: 'crawling-server.c4y9vm1irfhh.ap-northeast-2.rds.amazonaws.com' # RDS 엔드포인트 주소
          mysql port: '3306' # RDS 포트 번호

      - name: Generate Gradle Wrapper
        run: gradle wrapper
        working-directory: .  # 프로젝트 루트 디렉토리에서 Gradle Wrapper를 생성
        
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x gradlew
        working-directory: .

      - name: Build with Gradle
#        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#        with:
#          arguments: build
        run : ./gradlew clean build --exclude-task test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image tag(verion)
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"

      - name: Build, tag, and push image to Amazon ECR
        id: image-info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend-app
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          echo "::set-output name=ecr_repository::$ECR_REPOSITORY"
          echo "::set-output name=image_tag::$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Checkout for Kustomize repository
        uses: actions/checkout@v2
        with:
          # kubernetes yaml 파일 저장
          repository: ClassMore/k8s-manifest-repo # k8s yaml 파일이 있는 repo
          ref: main  # branch 이름
          token: ${{ secrets.ACTION_TOKEN }} # Github Action token을 발급받아서 repo secrect에 등록해줘야한다
          path: k8s-manifest-repo # 최상위 경로로 repository와 동일하게 설정

      - name: Update Kubernetes resources
        run: |
          echo \${{ steps.login-ecr.outputs.registry }}
          echo \${{ steps.image-info.outputs.ecr_repository }}
          echo \${{ steps.image-info.outputs.image_tag }}
          cd k8s-manifest-repo/overlays/dev/
          kustomize edit set image \${{ steps.login-ecr.outputs.registry}}/\${{ steps.image-info.outputs.ecr_repository }}=\${{ steps.login-ecr.outputs.registry}}/\${{ steps.image-info.outputs.ecr_repository }}:\${{ steps.image-info.outputs.image_tag }}
          cat kustomization.yaml

        # 수정된 kustomization.yaml 파일 commit push
      - name: Commit files
        run: |
          cd k8s-manifest-repo
          git config --global user.email "icj4153@hanyang.ac.kr"
          git config --global user.name "icj4153"
          git commit -am "스프링 서버 이미지 태그 업데이트"
          git push -u origin main